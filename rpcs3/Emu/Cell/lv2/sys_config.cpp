#include "stdafx.h"
#include "Emu/System.h"
#include "Emu/Memory/vm.h"
#include "Emu/IdManager.h"

#include "Emu/Cell/lv2/sys_event.h"
#include "Emu/Cell/ErrorCodes.h"

#include "sys_config.h"


logs::channel sys_config("sys_config");

u32 padlistenderhandle;

error_code sys_config_open(u32 equeue_id, vm::ptr<u32> config_id)
{
	sys_config.warning("sys_config_open(equeue_id=0x%x, config_id=*0x%x)", equeue_id, config_id);

	const auto queue = idm::get<lv2_obj, lv2_event_queue>(equeue_id);

	if (!queue)
	{
		return CELL_ESRCH;
	}

	auto config = std::make_shared<lv2_config>();
	if (const u32 id = idm::import_existing<lv2_config>(std::move(config)))
	{
		config->queue = std::move(queue);
		*config_id = id;

		return CELL_OK;
	}

	return CELL_EAGAIN;
}

error_code sys_config_close(u32 config_id)
{
	sys_config.warning("sys_config_close(config_id=0x%x)", config_id);

	if (!idm::remove<lv2_config>(config_id))
	{
		return CELL_ESRCH;
	}

	return CELL_OK;
}

error_code sys_config_register_service(ppu_thread& ppu, u32 config_id, s64 id, u32 c, u32 d, vm::ptr<u32> data, u32 size, vm::ptr<u32> service_handle)
{
	// buf is only input - it is never written to
	// service_handle is always an output, it is *not* read from

	// IDs:
	// 0x8000000000001030

	// From realhw syscall dump when vsh boots
	// SC count | ID                 | c      | d | *buf (in)                                                                                                                        | size | *handle (out) -> return
	// ---------|--------------------|--------|---|----------------------------------------------------------------------------------------------------------------------------------|------|------------------------
	//      129 | 0x8000000000001030 |      0 | 1 | 006e7d98006e7d88006e7d70006e7d48006fbd40006e7d90006e7d80000000000000000000000000000000000000000000000000                         |   52 |    0x43000804 ->      0
	//      429 | 0x8000000000001020 | 0x1000 | 1 | 80000000000010200000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 |   64 |    0x43011c06 ->      0
	//     3558 | 0x8000000000001000 |      0 | 1 | 0000000200020000000000060000141500002000020300000000000004012e80                                                                 |   32 |    0x43001509 ->      0  # libusbd_usbd_thread
	//     4423 | 0x8000000000001020 |      2 | 1 | 80000000000010200000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 |   64 |    0x43010909 ->      0
	//     4428 | 0x8000000000001011 |      0 | 1 | 80000000000010000000000000000000000000000000000100000002000200000000000000000000000000000000000000000000000000000000000000000000 |   64 |    0x43010e09 ->      0
	//    28890 | 0x8000000000000001 |      0 | 1 | NULL                                                                                                                             |    0 |    0x43023f07 ->      0  # x3::hidportassign
	//    34876 | 0x8000000000001020 |      1 | 1 | 80000000000010200000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 |   64 |    0x43020808 ->      0
	//    50801 | 0x8000000000001020 | 0x1000 | 1 | 80000000000010200000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 |   64 |    0x43021c06 ->      0
	//    50807 | 0x8000000000001020 |      2 | 1 | 80000000000010200000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 |   64 |    0x43013d06 ->      0

	static u32 next_service_handle = 0x4300'0000;

	sys_config.todo("sys_config_register_service(config_id=0x%x, id=0x%x, 0x%x, 0x%x, data=0x%x, size=0x%x, output=0x%x) -> 0x%x", config_id, id, c, d, data, size, service_handle, next_service_handle);

	if (id >= 0)
	{
		return CELL_EINVAL;
	}

	*service_handle = next_service_handle;
	next_service_handle += 0x100; // the actual algorithm is unknown, but this seems to work well enough

	return CELL_OK;
}

// sys_config_unregister_service(u32 config_id, u32 handle)
//
// From realhw syscall dump when vsh boots
// SC count | handle     -> ret
// ---------|------------------
//    50798 | 0x43011c06 -> 0
//    50804 | 0x43010909 -> 0

error_code sys_config_add_service_listener(u32 config_id, s64 id, u32 c, vm::ptr<void> buf, u32 size, u32 f, vm::ptr<u32> service_listener_handle)
{
	// buf is only input - it is never written to
	// buf *can* be NULL (and size will be 0)
	// handle is always an output, it is *not* read from

	// IDs:
	// 0x              11 == padmanager?
	// 0x              12
	// 0x              20
	//
	// 0x8000000000000001 == libpad
	// 0x8000000000000002 == libkb
	// 0x8000000000000003 == libmouse
	//
	// 0x8000000000001000
	// 0x8000000000001010
	// 0x8000000000001011
	// 0x8000000000001013
	// 0x8000000000001020
	// 0x8000000000001030

	// From realhw syscall dump when vsh boots
	// SC count | ID                 | c | *buf (in)                                            | size | f | *handle (out) -> return
	// ---------|--------------------|---|------------------------------------------------------|------|---|------------------------
	//       92 | 0x8000000000001013 | 1 | NULL                                                 |    0 | 1 |    0x42002c03 ->      0
	//       93 | 0x8000000000001020 | 1 | NULL                                                 |    0 | 1 |    0x42002d03 ->      0
	//      121 | 0x8000000000001010 | 1 | NULL                                                 |    0 | 1 |    0x42003e03 ->      0
	//      122 | 0x8000000000001020 | 1 | NULL                                                 |    0 | 1 |    0x42003f03 ->      0
	//      123 | 0x8000000000001011 | 1 | NULL                                                 |    0 | 1 |    0x42000004 ->      0
	//      125 | 0x8000000000001030 | 1 | NULL                                                 |    0 | 1 |    0x42000504 ->      0
	//      232 |               0x11 | 1 | 0200000000000000000000000000000000000000000000000000 |   26 | 1 |    0x42001d05 ->      0
	//      233 |               0x11 | 1 | 0400000000000000000000000000000000000000000000000000 |   26 | 1 |    0x42001e05 ->      0
    //      303 | 0x8000000000000001 | 1 | NULL                                                 |    0 | 1 |    0x42002c05 ->      0
	//      304 | 0x8000000000000002 | 1 | NULL                                                 |    0 | 1 |    0x42002e05 ->      0
	//      305 | 0x8000000000000003 | 1 | NULL                                                 |    0 | 1 |    0x42003005 ->      0
	//      444 |               0x20 | 1 | NULL                                                 |    0 | 1 |    0x423f2306 ->      0
	//      445 |               0x20 | 1 | NULL                                                 |    0 | 1 |    0x42002506 ->      0
	//     4407 |               0x12 | 1 | 0100000000000000000000000000000000000000000000000000 |   26 | 1 |    0x42012906 ->      0
	//     4411 |               0x11 | 1 | 0100000000000000000000000000000000000000000000000000 |   26 | 1 |    0x42013607 ->      0
	//     4426 | 0x8000000000001000 | 1 | NULL                                                 |    0 | 1 |    0x42010d09 ->      0
	//     4430 |               0x20 | 1 | NULL                                                 |    0 | 1 |    0x42010f09 ->      0
	//     4431 | 0x8000000000001002 | 1 | NULL                                                 |    0 | 1 |    0x42011109 ->      0
	//    50282 | 0x8000000000000001 | 1 | NULL                                                 |    0 | 1 |    0x42012d05 ->      0
	//    50293 | 0x8000000000000002 | 1 | NULL                                                 |    0 | 1 |    0x42012f05 ->      0
	//    50294 | 0x8000000000000003 | 1 | NULL                                                 |    0 | 1 |    0x42013105 ->      0
	//    50399 |               0x20 | 1 | NULL                                                 |    0 | 1 |    0x42020206 ->      0
	//    50400 |               0x20 | 1 | NULL                                                 |    0 | 1 |    0x42020606 ->      0
	//    51694 | 0x8000000000000001 | 1 | NULL                                                 |    0 | 1 |    0x42000d01 ->      0
	//    51932 | 0x8000000000000002 | 1 | NULL                                                 |    0 | 1 |    0x42001801 ->      0

	static u32 next_listener_handle = 0x4200'0000;

	sys_config.todo("sys_config_add_service_listener(config_id=0x%x, id=0x%x, 0x%x, buf=*0x%x, size=%d, 0x%x, service_listener_handle=*0x%x) -> 0x%x", config_id, id, c, buf, size, f, next_listener_handle);

	*service_listener_handle = next_listener_handle;
	next_listener_handle += 0x100; // unknown how these are used/incremented, this seems to be pretty close though

	// low 32 bits is event_id, 33rd bit, can be either 1 or 0
	// 0 looks to be 'unavaiable' flag?
	// 1 is 'available' flag
	static u64 event_id = 0x100000001;
	const auto cfg = idm::get<lv2_config>(config_id);
	if (cfg && id == 0x8000000000000001ll) {
		if (auto q = cfg->queue.lock())
		{
			padlistenderhandle = *service_listener_handle;
			// 'source' in this case looks to be config_event_type:
			// 1 for service event
			// 2 for io error event
			// invalid for any others
			// data3 looks to be size of event to write
			q->send(1, config_id, event_id, 0x68);
			++event_id;
		}
	}
	else if (cfg && id == 0x11) {
		// 0x11 == padmanager?
		if (auto q = cfg->queue.lock())
		{
			padlistenderhandle = *service_listener_handle;
			// 'source' in this case looks to be config_event_type:
			// 1 for service event
			// 2 for io event
			// invalid for any others
			// data3 looks to be size of event to write
			q->send(1, config_id, event_id, 0x68);
			++event_id;
		}
	}

	return CELL_OK;
}

//sys_config_remove_service_listener(u32 config_id, u32 service_listener_handle)
//
// From realhw syscall dump when vsh boots
// SC count | handle     -> ret
// ---------|------------------
//    48504 | 0x423f2306 -> 0
//    48505 | 0x42002506 -> 0
//    50005 | 0x42002c05 -> 0
//    50008 | 0x42002e05 -> 0
//    50009 | 0x42003005 -> 0

error_code sys_config_get_service_event(u32 config_id, u32 event_id, vm::ptr<void> event, u64 size) {
	sys_config.todo("sys_config_get_service_event(config_id=0x%x, event_id=0x%llx, event=*0x%llx, size=0x%llx)", config_id, event_id, event, size);

	// From realhw syscall dump when vsh boots
	// SC count | ID                 | *buf (out)                                                                                               | size -> ret
	// ---------|--------------------|----------------------------------------------------------------------------------------------------------|------------
	//      130 |                  0 | 42000504000000018000000000001030000000000000000000000000000000010000003400000000006e7d98006e7d88006e7d70 |   92 -> 0
	//          |                    | 006e7d48006fbd40006e7d90006e7d80000000000000000000000000000000000000000000000000                         |
    //      430 |                0xb | 42002d03000000018000000000001020000000000000100000000000000000010000004000000000800000000000102000000000 |  104 -> 0
	//          |                    | 00001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 |
	//      431 |                0xc | 42003f03000000018000000000001020000000000000100000000000000000010000004000000000800000000000102000000000 |  104 -> 0
	//          |                    | 00001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 |
	//     4408 |               0x15 | 42012906000000010000000000000012000000000000000000000000000000010000001a0000000001010202000000000000054c |   66 -> 0
	//          |                    | 02680010918804000007000000000x10022130                                                                   |
	//     4424 |               0x16 | 42002d03000000018000000000001020000000000000000200000000000000010000004000000000800000000000102000000000 |  104 -> 0
	//          |                    | 00000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 |
	//     4425 |               0x17 | 42003f03000000018000000000001020000000000000000200000000000000010000004000000000800000000000102000000000 |  104 -> 0
	//          |                    | 00000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 |
	//     4427 |               0x18 | 42010d09000000018000000000001000000000000000000000000000000000010000002000000000000000020002000000000006 |   72 -> 0
	//          |                    | 0000141500002000020300000000000004012e80                                                                 |
	//     4429 |               0x19 | 42000004000000018000000000001011000000000000000000000000000000010000004000000000800000000000100000000000 |  104 -> 0
	//          |                    | 00000000000000000000000100000002000200000000000000000000000000000000000000000000000000000000000000000000 |
	//    28885 |               0x1a | 42013607000000010000000000000011000000000000000000000000000000010000001a0000000101010202000000000000054c |   66 -> 0
	//          |                    | 0268001091880400000700000000                                                                             |
	//    28891 |               0x1b | 42002c05000000018000000000000001000000000000000000000000000000010000000000000000                         |   40 -> 0
	//    34877 |               0x1c | 42002d03000000018000000000001020000000000000000100000000000000010000004063730000800000000000102000000000 |  104 -> 0
	//          |                    | 00000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 |
	//    34878 |               0x1d | 42003f03000000018000000000001020000000000000000100000000000000010000004063730000800000000000102000000000 |  104 -> 0
	//          |                    | 00000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 |
	//    50283 |               0x1e | 42012d0500000001800000000000000100000000000000000000000000000001000000005f5f5f00                         |   40 -> 0
	//    50799 |               0x1f | 42002d030000000080000000000010200000000000001000                                                         |   24 -> 0
	//    50800 |               0x20 | 42003f030000000080000000000010200000000000001000                                                         |   24 -> 0
	//    50802 |               0x21 | 42002d0300000001800000000000102000000000000010000000000000000001000000406c776d00800000000000102000000000 |  104 -> 0
	//          |                    | 00001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 |
	//    50803 |               0x22 | 42003f03000000018000000000001020000000000000100000000000000000010000004000000000800000000000102000000000 |  104 -> 0
	//          |                    | 00001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 |
	//    50805 |               0x23 | 42002d030000000080000000000010200000000000000002                                                         |   24 -> 0
	//    50806 |               0x24 | 42003f030000000080000000000010200000000000000002                                                         |   24 -> 0
	//    50808 |               0x25 | 42002d03000000018000000000001020000000000000000200000000000000010000004000000000800000000000102000000000 |  104 -> 0
	//          |                    | 00000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 |
	//    50809 |               0x26 | 42003f03000000018000000000001020000000000000000200000000000000010000004000000000800000000000102000000000 |  104 -> 0
	//          |                    | 00000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 |
	//    51695 |               0x27 | 42000d01000000018000000000000001000000000000000000000000000000010000000000000000                         |   40 -> 0

	// args...0x8, 0x10, 0x18, 0x28..or 0 if unk6 == 0,  0x20
	auto& ev = vm::static_ptr_cast<sys_config_service_event_available>(event);
	ev->service_listener_handle = padlistenderhandle;
	ev->logical_port = 1; // it doesnt look like 0 is valid?
	ev->unk2 = 0;
	ev->device_no = 0;
	ev->unk5 = 0;
	ev->has_dev_info = 1;
	ev->hid_info.hid_device_type = 1;

	return CELL_OK;
}
